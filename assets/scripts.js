(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Game, PostGame, PreGame, SpaceShooterGame, game;

PreGame = require('./pregame');

PostGame = require('./postgame');

Game = require('./game');

module.exports = SpaceShooterGame = (function() {
  function SpaceShooterGame() {
    this.game = new Phaser.Game(451, 750, Phaser.AUTO);
    this.registerStates();
  }

  SpaceShooterGame.prototype.registerStates = function() {
    this.game.state.add('preGame', new PreGame(this.game), true);
    this.game.state.add('game', new Game(this.game));
    return this.game.state.add('postGame', new PostGame(this.game));
  };

  return SpaceShooterGame;

})();

game = new SpaceShooterGame();


},{"./game":3,"./postgame":4,"./pregame":5}],2:[function(require,module,exports){
var FPS;

module.exports = FPS = (function() {
  function FPS(game) {
    this.game = game;
    this.fpsText = null;
    this.create();
  }

  FPS.prototype.create = function() {
    return this.fpsText = this.game.add.text(0, 0, "0", {
      fontSize: '16px',
      fill: 'white',
      stroke: "black",
      strokeThickness: 5
    });
  };

  FPS.prototype.update = function() {
    return this.fpsText.content = this.game.time.fps.toString();
  };

  return FPS;

})();


},{}],3:[function(require,module,exports){
var FPS, Game;

FPS = require('./fps');

module.exports = Game = (function() {
  function Game(game) {
    this.game = game;
  }

  Game.prototype.preload = function() {
    this.game.load.image('bg', '/assets/images/background.png');
    this.game.load.image('player', '/assets/images/player-ship.png');
    this.game.load.image('enemy1', '/assets/images/enemy-green.png');
    this.game.load.image('enemy2', '/assets/images/enemy-red.png');
    this.game.load.image('enemy3', '/assets/images/enemy-yellow.png');
    this.game.load.image('powerUp', '/assets/images/star-gold.png');
    return this.game.load.image('laser', '/assets/images/laser-green.png');
  };

  Game.prototype.create = function() {
    this.playerVelocity = 400;
    this.laserVelocity = 500;
    this.enemyVelocity = 100;
    this.baseEnemyVelocity = 100;
    this.cursor = null;
    this.lives = 3;
    this.score = 0;
    this.timeBetweenLaserBeams = 200;
    this.laserDelta = 0;
    this.averageEnemySpawnTime = 600;
    this.enemyDelta = 0;
    this.powerUpDelta = 0;
    this.powerUpSpawnTime = 8000;
    this.powerUpVelocity = 100;
    this.powerUpTime = 5000;
    this.poweredUpDelta = 0;
    this.background = this.game.add.sprite(0, 0, 'bg');
    this.createPlayer();
    this.createLasers();
    this.createPowerUps();
    this.createEnemies();
    this.createScoreText();
    this.createLivesText();
    this.cursor = this.game.input.keyboard.createCursorKeys();
    return this.startTime = this.game.time.now;
  };

  Game.prototype.update = function() {
    this.player.body.velocity.x = 0;
    if (this.cursor.left.isDown) {
      this.player.body.velocity.x = -this.playerVelocity;
    } else if (this.cursor.right.isDown) {
      this.player.body.velocity.x = this.playerVelocity;
    }
    if (this.cursor.up.isDown) {
      this.fire();
    }
    this.updateEnemySpeed();
    this.spawnEnemy();
    this.spawnPowerUps();
    this.updateScoreText();
    this.updateLivesText();
    this.game.physics.overlap(this.player, this.enemies, this.playerHit, null, this);
    this.game.physics.overlap(this.lasers, this.enemies, this.enemyHit, null, this);
    this.game.physics.overlap(this.lasers, this.powerUps, this.powerUpHit, null, this);
    return this.game.physics.overlap(this.player, this.powerUps, this.powerUpPlayer, null, this);
  };

  Game.prototype.createPlayer = function() {
    this.player = this.game.add.sprite(0, 0, 'player');
    this.player.body.collideWorldBounds = true;
    this.player.y = (this.game.height - this.player.height) - 20;
    return this.player.x = this.game.width / 2 - this.player.width / 2;
  };

  Game.prototype.createLasers = function() {
    this.lasers = this.game.add.group();
    this.lasers.createMultiple(40, 'laser');
    return this.lasers.setAll('outOfBoundsKill', true);
  };

  Game.prototype.createEnemies = function() {
    this.enemies = this.game.add.group();
    this.enemies.createMultiple(25, 'enemy1');
    this.enemies.setAll('outOfBoundsKill', true);
    this.enemies.setAll('scale.x', 0.5);
    return this.enemies.setAll('scale.y', 0.5);
  };

  Game.prototype.createPowerUps = function() {
    this.powerUps = this.game.add.group();
    this.powerUps.createMultiple(5, 'powerUp');
    return this.powerUps.setAll('outOfBoundsKill', true);
  };

  Game.prototype.fire = function() {
    var bounce;
    if (this.game.time.now > this.laserDelta) {
      this.spawnOneLaserBeam();
      this.laserDelta = this.game.time.now + this.timeBetweenLaserBeams;
      bounce = this.game.add.tween(this.player);
      return bounce.to({
        y: this.player.y + 5
      }, 80, Phaser.Easing.Bounce.None).to({
        y: this.player.y
      }, 80, Phaser.Easing.Bounce.None).start();
    }
  };

  Game.prototype.spawnOneLaserBeam = function() {
    var laser, laser1, laser2;
    if (this.isPoweredUp) {
      laser1 = this.lasers.getFirstExists(false);
      laser1.reset(this.player.x, this.player.y);
      laser1.body.velocity.y = -this.laserVelocity;
      laser2 = this.lasers.getFirstExists(false);
      laser2.reset(this.player.x + this.player.width, this.player.y);
      laser2.body.velocity.y = -this.laserVelocity;
      if (this.game.time.now > this.poweredUpDelta) {
        return this.isPoweredUp = false;
      }
    } else {
      laser = this.lasers.getFirstExists(false);
      laser.reset(this.player.x + (this.player.width / 2 - 3), this.player.y);
      return laser.body.velocity.y = -this.laserVelocity;
    }
  };

  Game.prototype.spawnEnemy = function() {
    if (this.game.time.now > this.enemyDelta) {
      this.spawnOneEnemy();
      return this.enemyDelta = this.game.time.now + this.enemySpawnTime();
    }
  };

  Game.prototype.spawnPowerUps = function() {
    if (this.game.time.now > this.powerUpDelta) {
      this.spawnOnePowerUp();
      return this.powerUpDelta = this.game.time.now + this.powerUpSpawnTime;
    }
  };

  Game.prototype.spawnOnePowerUp = function() {
    var powerUp;
    powerUp = this.powerUps.getFirstExists(false);
    powerUp.reset(this.game.rnd.realInRange(powerUp.width, this.game.world.width - powerUp.width), -powerUp.width);
    return powerUp.body.velocity.y += this.powerUpVelocity;
  };

  Game.prototype.createScoreText = function() {
    return this.scoreText = this.game.add.text(20, 20, this.score, {
      fontSize: '14px',
      fill: 'white'
    });
  };

  Game.prototype.createLivesText = function() {
    this.livesText = this.game.add.text(0, 0, this.lives, {
      fontSize: '14px',
      fill: 'white'
    });
    this.livesText.anchor = new Phaser.Point(1, 0);
    this.livesText.x = this.game.width - 20;
    return this.livesText.y = 20;
  };

  Game.prototype.enemySpawnTime = function() {
    var lower, spawnTimeRange, upper;
    spawnTimeRange = this.averageEnemySpawnTime * 0.2;
    upper = this.averageEnemySpawnTime + spawnTimeRange;
    lower = this.averageEnemySpawnTime - spawnTimeRange;
    return this.game.rnd.integerInRange(lower, upper);
  };

  Game.prototype.spawnOneEnemy = function() {
    var enemy;
    enemy = this.enemies.getFirstExists(false);
    enemy.reset(this.game.rnd.realInRange(enemy.width, this.game.world.width - enemy.width), -enemy.width);
    return enemy.body.velocity.y = +this.enemyVelocity;
  };

  Game.prototype.playerHit = function(player, enemy) {
    var bounce;
    enemy.kill();
    bounce = this.game.add.tween(this.player);
    bounce.to({
      alpha: 0.4
    }, 100, Phaser.Easing.Bounce.None).to({
      alpha: this.player.alpha
    }, 100, Phaser.Easing.Bounce.None).start();
    if (this.lives === 1) {
      this.player.kill();
      this.game.state.start('postGame', false);
    }
    return this.lives -= 1;
  };

  Game.prototype.enemyHit = function(laser, enemy) {
    laser.kill();
    enemy.kill();
    return this.score += 1;
  };

  Game.prototype.updateScoreText = function() {
    return this.scoreText.content = this.score;
  };

  Game.prototype.updateLivesText = function() {
    var f;
    this.livesText.content = this.lives;
    if (this.lives === 1) {
      f = this.livesText.font;
      f.fill = '#ff0000';
      return this.livesText.setStyle(f);
    }
  };

  Game.prototype.updateEnemySpeed = function() {
    var velocityAddOn;
    velocityAddOn = (this.game.time.now - this.startTime) / 1000;
    return this.enemyVelocity = this.baseEnemyVelocity + velocityAddOn;
  };

  Game.prototype.powerUpHit = function(laser, powerUp) {
    laser.kill();
    return powerUp.kill();
  };

  Game.prototype.powerUpPlayer = function(player, powerUp) {
    powerUp.kill();
    this.score = +10;
    this.isPoweredUp = true;
    return this.poweredUpDelta = this.game.time.now + this.powerUpTime;
  };

  return Game;

})();


},{"./fps":2}],4:[function(require,module,exports){
var PostGame;

module.exports = PostGame = (function() {
  function PostGame(game) {
    game = this.game;
  }

  PostGame.prototype.create = function() {
    this.gameOverText = this.game.add.text(0, 0, "GAME OVER", {
      font: 'bold 40px Arial',
      fill: 'white'
    });
    this.gameOverText.x = Math.floor(this.game.world.width / 2 - this.gameOverText.width / 2);
    this.gameOverText.y = Math.floor(this.game.world.height / 2 - this.gameOverText.height / 2);
    this.pressUpText = this.game.add.text(0, 0, "Press UP to try again", {
      font: 'normal 20px Arial',
      fill: 'white'
    });
    this.pressUpText.x = Math.floor(this.game.world.width / 2 - this.pressUpText.width / 2);
    this.pressUpText.y = Math.floor((this.game.world.height / 2 - this.pressUpText.height / 2) + 40);
    return this.cursor = this.game.input.keyboard.createCursorKeys();
  };

  PostGame.prototype.update = function() {
    if (this.cursor.up.isDown) {
      return this.game.state.start('game', true, true);
    }
  };

  return PostGame;

})();


},{}],5:[function(require,module,exports){
var PreGame;

module.exports = PreGame = (function() {
  function PreGame(game) {
    game = this.game;
  }

  PreGame.prototype.preload = function() {
    return this.game.load.image('bg', '/assets/images/background.png');
  };

  PreGame.prototype.create = function() {
    this.background = this.game.add.sprite(0, 0, 'bg');
    this.gameOverText = this.game.add.text(0, 0, "Space Shooter", {
      font: 'bold 40px Arial',
      fill: 'white'
    });
    this.gameOverText.x = Math.floor(this.game.world.width / 2 - this.gameOverText.width / 2);
    this.gameOverText.y = Math.floor(this.game.world.height / 2 - this.gameOverText.height / 2);
    this.pressUpText = this.game.add.text(0, 0, "Press UP to play", {
      font: 'normal 20px Arial',
      fill: 'white'
    });
    this.pressUpText.x = Math.floor(this.game.world.width / 2 - this.pressUpText.width / 2);
    this.pressUpText.y = Math.floor((this.game.world.height / 2 - this.pressUpText.height / 2) + 40);
    return this.cursor = this.game.input.keyboard.createCursorKeys();
  };

  PreGame.prototype.update = function() {
    if (this.cursor.up.isDown) {
      return this.game.state.start('game', true, true);
    }
  };

  return PreGame;

})();


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvVXNlcnMvd2lsbG1jbmVpbGx5L1NpdGVzL3NwYWNlLXNob290ZXItcGhhc2VyL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi9Vc2Vycy93aWxsbWNuZWlsbHkvU2l0ZXMvc3BhY2Utc2hvb3Rlci1waGFzZXIvc2NyaXB0cy9jb2ZmZWUvYXBwLmNvZmZlZSIsIi9Vc2Vycy93aWxsbWNuZWlsbHkvU2l0ZXMvc3BhY2Utc2hvb3Rlci1waGFzZXIvc2NyaXB0cy9jb2ZmZWUvZnBzLmNvZmZlZSIsIi9Vc2Vycy93aWxsbWNuZWlsbHkvU2l0ZXMvc3BhY2Utc2hvb3Rlci1waGFzZXIvc2NyaXB0cy9jb2ZmZWUvZ2FtZS5jb2ZmZWUiLCIvVXNlcnMvd2lsbG1jbmVpbGx5L1NpdGVzL3NwYWNlLXNob290ZXItcGhhc2VyL3NjcmlwdHMvY29mZmVlL3Bvc3RnYW1lLmNvZmZlZSIsIi9Vc2Vycy93aWxsbWNuZWlsbHkvU2l0ZXMvc3BhY2Utc2hvb3Rlci1waGFzZXIvc2NyaXB0cy9jb2ZmZWUvcHJlZ2FtZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxJQUFBLCtDQUFBOztBQUFBLE9BQUEsR0FBVSxPQUFBLENBQVEsV0FBUixDQUFWLENBQUE7O0FBQUEsUUFDQSxHQUFXLE9BQUEsQ0FBUSxZQUFSLENBRFgsQ0FBQTs7QUFBQSxJQUVBLEdBQU8sT0FBQSxDQUFRLFFBQVIsQ0FGUCxDQUFBOztBQUFBLE1BSU0sQ0FBQyxPQUFQLEdBQXVCO0FBQ1IsRUFBQSwwQkFBQSxHQUFBO0FBQ1gsSUFBQSxJQUFDLENBQUEsSUFBRCxHQUFZLElBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxHQUFaLEVBQWlCLEdBQWpCLEVBQXNCLE1BQU0sQ0FBQyxJQUE3QixDQUFaLENBQUE7QUFBQSxJQUNB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bkIsR0FBdUIsSUFBQyxDQUFBLFdBQVcsQ0FBQyxNQUFiLEdBQW9CLENBQTVDLENBQUEsR0FBaUQsRUFBNUQsQ0FSakIsQ0FBQTtXQVVBLElBQUMsQ0FBQSxNQUFELEdBQVUsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGdCQUFyQixDQUFBLEVBWEo7RUFBQSxDQU5SLENBQUE7O0FBQUEsb0JBbUJBLE1BQUEsR0FBUSxTQUFBLEdBQUE7QUFDTixJQUFBLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBZDthQUNFLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQVosQ0FBa0IsTUFBbEIsRUFBMEIsSUFBMUIsRUFBZ0MsSUFBaEMsRUFERjtLQURNO0VBQUEsQ0FuQlIsQ0FBQTs7aUJBQUE7O0lBREYsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiUHJlR2FtZSA9IHJlcXVpcmUgJy4vcHJlZ2FtZSdcblBvc3RHYW1lID0gcmVxdWlyZSAnLi9wb3N0Z2FtZSdcbkdhbWUgPSByZXF1aXJlICcuL2dhbWUnXG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgU3BhY2VTaG9vdGVyR2FtZVxuICBjb25zdHJ1Y3RvcjogKCkgLT5cbiAgICBAZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSA0NTEsIDc1MCwgUGhhc2VyLkFVVE9cbiAgICBAcmVnaXN0ZXJTdGF0ZXMoKVxuXG4gIHJlZ2lzdGVyU3RhdGVzOiAtPlxuICAgIEBnYW1lLnN0YXRlLmFkZCgncHJlR2FtZScsIG5ldyBQcmVHYW1lKEBnYW1lKSwgdHJ1ZSlcbiAgICBAZ2FtZS5zdGF0ZS5hZGQoJ2dhbWUnLCBuZXcgR2FtZShAZ2FtZSkpXG4gICAgQGdhbWUuc3RhdGUuYWRkKCdwb3N0R2FtZScsIG5ldyBQb3N0R2FtZShAZ2FtZSkpXG5cblxuZ2FtZSA9IG5ldyBTcGFjZVNob290ZXJHYW1lKClcbiIsIm1vZHVsZS5leHBvcnRzID0gY2xhc3MgRlBTXG4gIGNvbnN0cnVjdG9yOiAoZ2FtZSkgLT5cbiAgICBAZ2FtZSA9IGdhbWVcbiAgICBAZnBzVGV4dCA9IG51bGxcbiAgICBAY3JlYXRlKClcblxuICBjcmVhdGU6IC0+XG4gICAgQGZwc1RleHQgPSBAZ2FtZS5hZGQudGV4dCgwLCAwLCBcIjBcIiwgeyBmb250U2l6ZTogJzE2cHgnLCBmaWxsOiAnd2hpdGUnLCBzdHJva2U6IFwiYmxhY2tcIiwgc3Ryb2tlVGhpY2tuZXNzOiA1IH0pXG5cbiAgdXBkYXRlOiAtPlxuICAgIEBmcHNUZXh0LmNvbnRlbnQgPSBAZ2FtZS50aW1lLmZwcy50b1N0cmluZygpXG4iLCJGUFMgPSByZXF1aXJlICcuL2ZwcydcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBHYW1lXG4gIGNvbnN0cnVjdG9yOiAoZ2FtZSkgLT5cbiAgICBAZ2FtZSA9IGdhbWVcblxuICBwcmVsb2FkOiAtPlxuICAgIEBnYW1lLmxvYWQuaW1hZ2UoJ2JnJywgJy9hc3NldHMvaW1hZ2VzL2JhY2tncm91bmQucG5nJylcbiAgICBAZ2FtZS5sb2FkLmltYWdlKCdwbGF5ZXInLCAnL2Fzc2V0cy9pbWFnZXMvcGxheWVyLXNoaXAucG5nJylcbiAgICBAZ2FtZS5sb2FkLmltYWdlKCdlbmVteTEnLCAnL2Fzc2V0cy9pbWFnZXMvZW5lbXktZ3JlZW4ucG5nJylcbiAgICBAZ2FtZS5sb2FkLmltYWdlKCdlbmVteTInLCAnL2Fzc2V0cy9pbWFnZXMvZW5lbXktcmVkLnBuZycpXG4gICAgQGdhbWUubG9hZC5pbWFnZSgnZW5lbXkzJywgJy9hc3NldHMvaW1hZ2VzL2VuZW15LXllbGxvdy5wbmcnKVxuICAgIEBnYW1lLmxvYWQuaW1hZ2UoJ3Bvd2VyVXAnLCAnL2Fzc2V0cy9pbWFnZXMvc3Rhci1nb2xkLnBuZycpXG4gICAgQGdhbWUubG9hZC5pbWFnZSgnbGFzZXInLCAnL2Fzc2V0cy9pbWFnZXMvbGFzZXItZ3JlZW4ucG5nJylcblxuICBjcmVhdGU6IC0+XG4gICAgQHBsYXllclZlbG9jaXR5ID0gNDAwXG4gICAgQGxhc2VyVmVsb2NpdHkgPSA1MDBcbiAgICBAZW5lbXlWZWxvY2l0eSA9IDEwMFxuICAgIEBiYXNlRW5lbXlWZWxvY2l0eSA9IDEwMFxuICAgIEBjdXJzb3IgPSBudWxsXG4gICAgQGxpdmVzID0gM1xuICAgIEBzY29yZSA9IDBcbiAgICBAdGltZUJldHdlZW5MYXNlckJlYW1zID0gMjAwXG4gICAgQGxhc2VyRGVsdGEgPSAwXG4gICAgQGF2ZXJhZ2VFbmVteVNwYXduVGltZSA9IDYwMFxuICAgIEBlbmVteURlbHRhID0gMFxuICAgIEBwb3dlclVwRGVsdGEgPSAwXG4gICAgQHBvd2VyVXBTcGF3blRpbWUgPSA4MDAwXG4gICAgQHBvd2VyVXBWZWxvY2l0eSA9IDEwMFxuICAgIEBwb3dlclVwVGltZSA9IDUwMDBcbiAgICBAcG93ZXJlZFVwRGVsdGEgPSAwXG5cbiAgICBAYmFja2dyb3VuZCA9IEBnYW1lLmFkZC5zcHJpdGUoMCwgMCwgJ2JnJylcbiAgICBAY3JlYXRlUGxheWVyKClcbiAgICBAY3JlYXRlTGFzZXJzKClcbiAgICBAY3JlYXRlUG93ZXJVcHMoKVxuICAgIEBjcmVhdGVFbmVtaWVzKClcbiAgICBAY3JlYXRlU2NvcmVUZXh0KClcbiAgICBAY3JlYXRlTGl2ZXNUZXh0KClcbiAgICBAY3Vyc29yID0gQGdhbWUuaW5wdXQua2V5Ym9hcmQuY3JlYXRlQ3Vyc29yS2V5cygpXG4gICAgQHN0YXJ0VGltZSA9IEBnYW1lLnRpbWUubm93XG5cbiAgdXBkYXRlOiAtPlxuICAgIEBwbGF5ZXIuYm9keS52ZWxvY2l0eS54ID0gMFxuXG4gICAgaWYgQGN1cnNvci5sZWZ0LmlzRG93blxuICAgICAgQHBsYXllci5ib2R5LnZlbG9jaXR5LnggPSAtQHBsYXllclZlbG9jaXR5XG4gICAgZWxzZSBpZiBAY3Vyc29yLnJpZ2h0LmlzRG93blxuICAgICAgQHBsYXllci5ib2R5LnZlbG9jaXR5LnggPSBAcGxheWVyVmVsb2NpdHlcblxuICAgIGlmIEBjdXJzb3IudXAuaXNEb3duXG4gICAgICBAZmlyZSgpXG5cbiAgICBAdXBkYXRlRW5lbXlTcGVlZCgpXG4gICAgQHNwYXduRW5lbXkoKVxuICAgIEBzcGF3blBvd2VyVXBzKClcbiAgICBAdXBkYXRlU2NvcmVUZXh0KClcbiAgICBAdXBkYXRlTGl2ZXNUZXh0KClcblxuICAgIEBnYW1lLnBoeXNpY3Mub3ZlcmxhcChAcGxheWVyLCBAZW5lbWllcywgQHBsYXllckhpdCwgbnVsbCwgdGhpcylcbiAgICBAZ2FtZS5waHlzaWNzLm92ZXJsYXAoQGxhc2VycywgQGVuZW1pZXMsIEBlbmVteUhpdCwgbnVsbCwgdGhpcylcbiAgICBAZ2FtZS5waHlzaWNzLm92ZXJsYXAoQGxhc2VycywgQHBvd2VyVXBzLCBAcG93ZXJVcEhpdCwgbnVsbCwgdGhpcylcbiAgICBAZ2FtZS5waHlzaWNzLm92ZXJsYXAoQHBsYXllciwgQHBvd2VyVXBzLCBAcG93ZXJVcFBsYXllciwgbnVsbCwgdGhpcylcblxuICBjcmVhdGVQbGF5ZXI6IC0+XG4gICAgQHBsYXllciA9IEBnYW1lLmFkZC5zcHJpdGUoMCwgMCwgJ3BsYXllcicpXG4gICAgQHBsYXllci5ib2R5LmNvbGxpZGVXb3JsZEJvdW5kcyA9IHRydWVcbiAgICBAcGxheWVyLnkgPSAoQGdhbWUuaGVpZ2h0IC0gQHBsYXllci5oZWlnaHQpIC0gMjBcbiAgICBAcGxheWVyLnggPSBAZ2FtZS53aWR0aCAvIDIgLSBAcGxheWVyLndpZHRoIC8gMlxuXG4gIGNyZWF0ZUxhc2VyczogLT5cbiAgICBAbGFzZXJzID0gIEBnYW1lLmFkZC5ncm91cCgpXG4gICAgQGxhc2Vycy5jcmVhdGVNdWx0aXBsZSg0MCwgJ2xhc2VyJylcbiAgICBAbGFzZXJzLnNldEFsbCgnb3V0T2ZCb3VuZHNLaWxsJywgdHJ1ZSlcblxuICBjcmVhdGVFbmVtaWVzOiAtPlxuICAgIEBlbmVtaWVzID0gIEBnYW1lLmFkZC5ncm91cCgpXG4gICAgQGVuZW1pZXMuY3JlYXRlTXVsdGlwbGUoMjUsICdlbmVteTEnKVxuICAgIEBlbmVtaWVzLnNldEFsbCgnb3V0T2ZCb3VuZHNLaWxsJywgdHJ1ZSlcbiAgICBAZW5lbWllcy5zZXRBbGwoJ3NjYWxlLngnLCAwLjUpXG4gICAgQGVuZW1pZXMuc2V0QWxsKCdzY2FsZS55JywgMC41KVxuXG4gIGNyZWF0ZVBvd2VyVXBzOiAtPlxuICAgIEBwb3dlclVwcyA9IEBnYW1lLmFkZC5ncm91cCgpXG4gICAgQHBvd2VyVXBzLmNyZWF0ZU11bHRpcGxlKDUsICdwb3dlclVwJylcbiAgICBAcG93ZXJVcHMuc2V0QWxsKCdvdXRPZkJvdW5kc0tpbGwnLCB0cnVlKVxuXG4gIGZpcmU6IC0+XG4gICAgaWYgQGdhbWUudGltZS5ub3cgPiBAbGFzZXJEZWx0YVxuICAgICAgQHNwYXduT25lTGFzZXJCZWFtKClcbiAgICAgIEBsYXNlckRlbHRhID0gQGdhbWUudGltZS5ub3cgKyBAdGltZUJldHdlZW5MYXNlckJlYW1zXG4gICAgICBib3VuY2UgPSBAZ2FtZS5hZGQudHdlZW4oQHBsYXllcilcbiAgICAgIGJvdW5jZVxuICAgICAgICAudG8oeyB5OiBAcGxheWVyLnkgKyA1IH0sIDgwLCBQaGFzZXIuRWFzaW5nLkJvdW5jZS5Ob25lKVxuICAgICAgICAudG8oeyB5OiBAcGxheWVyLnkgfSwgODAsIFBoYXNlci5FYXNpbmcuQm91bmNlLk5vbmUpXG4gICAgICAgIC5zdGFydCgpXG5cbiAgc3Bhd25PbmVMYXNlckJlYW06IC0+XG4gICAgaWYgQGlzUG93ZXJlZFVwXG4gICAgICBsYXNlcjEgPSBAbGFzZXJzLmdldEZpcnN0RXhpc3RzKGZhbHNlKVxuICAgICAgbGFzZXIxLnJlc2V0KEBwbGF5ZXIueCwgQHBsYXllci55KVxuICAgICAgbGFzZXIxLmJvZHkudmVsb2NpdHkueSA9LSBAbGFzZXJWZWxvY2l0eVxuXG4gICAgICBsYXNlcjIgPSBAbGFzZXJzLmdldEZpcnN0RXhpc3RzKGZhbHNlKVxuICAgICAgbGFzZXIyLnJlc2V0KEBwbGF5ZXIueCArIEBwbGF5ZXIud2lkdGgsIEBwbGF5ZXIueSlcbiAgICAgIGxhc2VyMi5ib2R5LnZlbG9jaXR5LnkgPS0gQGxhc2VyVmVsb2NpdHlcblxuICAgICAgaWYgQGdhbWUudGltZS5ub3cgPiBAcG93ZXJlZFVwRGVsdGFcbiAgICAgICAgQGlzUG93ZXJlZFVwID0gZmFsc2VcbiAgICBlbHNlXG4gICAgICBsYXNlciA9IEBsYXNlcnMuZ2V0Rmlyc3RFeGlzdHMoZmFsc2UpXG4gICAgICBsYXNlci5yZXNldChAcGxheWVyLnggKyAoQHBsYXllci53aWR0aCAvIDIgLSAzKSwgQHBsYXllci55KVxuICAgICAgbGFzZXIuYm9keS52ZWxvY2l0eS55ID0tIEBsYXNlclZlbG9jaXR5XG5cbiAgc3Bhd25FbmVteTogLT5cbiAgICBpZiBAZ2FtZS50aW1lLm5vdyA+IEBlbmVteURlbHRhXG4gICAgICBAc3Bhd25PbmVFbmVteSgpXG4gICAgICBAZW5lbXlEZWx0YSA9IEBnYW1lLnRpbWUubm93ICsgQGVuZW15U3Bhd25UaW1lKClcblxuICBzcGF3blBvd2VyVXBzOiAtPlxuICAgIGlmIEBnYW1lLnRpbWUubm93ID4gQHBvd2VyVXBEZWx0YVxuICAgICAgQHNwYXduT25lUG93ZXJVcCgpXG4gICAgICBAcG93ZXJVcERlbHRhID0gQGdhbWUudGltZS5ub3cgKyBAcG93ZXJVcFNwYXduVGltZVxuXG4gIHNwYXduT25lUG93ZXJVcDogLT5cbiAgICBwb3dlclVwID0gQHBvd2VyVXBzLmdldEZpcnN0RXhpc3RzKGZhbHNlKVxuICAgIHBvd2VyVXAucmVzZXQoQGdhbWUucm5kLnJlYWxJblJhbmdlKHBvd2VyVXAud2lkdGgsIEBnYW1lLndvcmxkLndpZHRoIC0gcG93ZXJVcC53aWR0aCksIC1wb3dlclVwLndpZHRoKVxuICAgIHBvd2VyVXAuYm9keS52ZWxvY2l0eS55ICs9IEBwb3dlclVwVmVsb2NpdHlcblxuICBjcmVhdGVTY29yZVRleHQ6IC0+XG4gICAgQHNjb3JlVGV4dCA9IEBnYW1lLmFkZC50ZXh0KDIwLCAyMCwgQHNjb3JlLCB7IGZvbnRTaXplOiAnMTRweCcsIGZpbGw6ICd3aGl0ZSd9KVxuXG4gIGNyZWF0ZUxpdmVzVGV4dDogLT5cbiAgICBAbGl2ZXNUZXh0ID0gQGdhbWUuYWRkLnRleHQoMCwgMCwgQGxpdmVzLCB7IGZvbnRTaXplOiAnMTRweCcsIGZpbGw6ICd3aGl0ZSd9KVxuICAgIEBsaXZlc1RleHQuYW5jaG9yID0gbmV3IFBoYXNlci5Qb2ludCgxLDApXG4gICAgQGxpdmVzVGV4dC54ID0gQGdhbWUud2lkdGggLSAyMFxuICAgIEBsaXZlc1RleHQueSA9IDIwXG5cbiAgZW5lbXlTcGF3blRpbWU6IC0+XG4gICAgc3Bhd25UaW1lUmFuZ2UgPSBAYXZlcmFnZUVuZW15U3Bhd25UaW1lICogMC4yXG4gICAgdXBwZXIgPSBAYXZlcmFnZUVuZW15U3Bhd25UaW1lICsgc3Bhd25UaW1lUmFuZ2VcbiAgICBsb3dlciA9IEBhdmVyYWdlRW5lbXlTcGF3blRpbWUgLSBzcGF3blRpbWVSYW5nZVxuICAgIHJldHVybiBAZ2FtZS5ybmQuaW50ZWdlckluUmFuZ2UobG93ZXIsIHVwcGVyKVxuXG4gIHNwYXduT25lRW5lbXk6IC0+XG4gICAgZW5lbXkgPSBAZW5lbWllcy5nZXRGaXJzdEV4aXN0cyhmYWxzZSlcbiAgICBlbmVteS5yZXNldChAZ2FtZS5ybmQucmVhbEluUmFuZ2UoZW5lbXkud2lkdGgsIEBnYW1lLndvcmxkLndpZHRoIC0gZW5lbXkud2lkdGgpLCAtZW5lbXkud2lkdGgpXG4gICAgZW5lbXkuYm9keS52ZWxvY2l0eS55ID0rIEBlbmVteVZlbG9jaXR5XG4gICAgIyB0d2VlbiA9IEBnYW1lLmFkZC50d2VlbihlbmVteS5zY2FsZSlcbiAgICAjIHR3ZWVuXG4gICAgIyAgIC50byh7IHg6IDAuMywgeTogMC4zIH0sIDUwMCwgUGhhc2VyLkVhc2luZy5Cb3VuY2UuSU4sIHRydWUsIDkwLCB0cnVlLCB0cnVlKVxuXG4gIHBsYXllckhpdDogKHBsYXllciwgZW5lbXkpIC0+XG4gICAgZW5lbXkua2lsbCgpXG4gICAgYm91bmNlID0gQGdhbWUuYWRkLnR3ZWVuKEBwbGF5ZXIpXG4gICAgYm91bmNlXG4gICAgICAudG8oeyBhbHBoYTogMC40IH0sIDEwMCwgUGhhc2VyLkVhc2luZy5Cb3VuY2UuTm9uZSlcbiAgICAgIC50byh7IGFscGhhOiBAcGxheWVyLmFscGhhIH0sIDEwMCwgUGhhc2VyLkVhc2luZy5Cb3VuY2UuTm9uZSlcbiAgICAgIC5zdGFydCgpXG4gICAgaWYgKEBsaXZlcyA9PSAxKVxuICAgICAgQHBsYXllci5raWxsKClcbiAgICAgIEBnYW1lLnN0YXRlLnN0YXJ0KCdwb3N0R2FtZScsIGZhbHNlKVxuICAgIEBsaXZlcyAtPSAxXG5cbiAgZW5lbXlIaXQ6IChsYXNlciwgZW5lbXkpIC0+XG4gICAgbGFzZXIua2lsbCgpXG4gICAgZW5lbXkua2lsbCgpXG4gICAgQHNjb3JlICs9IDFcblxuICB1cGRhdGVTY29yZVRleHQ6IC0+XG4gICAgQHNjb3JlVGV4dC5jb250ZW50ID0gQHNjb3JlXG5cbiAgdXBkYXRlTGl2ZXNUZXh0OiAtPlxuICAgIEBsaXZlc1RleHQuY29udGVudCA9IEBsaXZlc1xuICAgIGlmIEBsaXZlcyBpcyAxXG4gICAgICBmID0gQGxpdmVzVGV4dC5mb250XG4gICAgICBmLmZpbGwgPSAnI2ZmMDAwMCdcbiAgICAgIEBsaXZlc1RleHQuc2V0U3R5bGUoZilcblxuICB1cGRhdGVFbmVteVNwZWVkOiAtPlxuICAgIHZlbG9jaXR5QWRkT24gPSAoQGdhbWUudGltZS5ub3cgLSBAc3RhcnRUaW1lKSAvIDEwMDBcbiAgICBAZW5lbXlWZWxvY2l0eSA9IEBiYXNlRW5lbXlWZWxvY2l0eSArIHZlbG9jaXR5QWRkT25cblxuICBwb3dlclVwSGl0OiAobGFzZXIsIHBvd2VyVXApIC0+XG4gICAgbGFzZXIua2lsbCgpXG4gICAgcG93ZXJVcC5raWxsKClcblxuICBwb3dlclVwUGxheWVyOiAocGxheWVyLCBwb3dlclVwKS0+XG4gICAgcG93ZXJVcC5raWxsKClcbiAgICBAc2NvcmUgPSsgMTBcbiAgICBAaXNQb3dlcmVkVXAgPSB0cnVlXG4gICAgQHBvd2VyZWRVcERlbHRhID0gQGdhbWUudGltZS5ub3cgKyBAcG93ZXJVcFRpbWVcbiIsIm1vZHVsZS5leHBvcnRzID0gY2xhc3MgUG9zdEdhbWVcbiAgY29uc3RydWN0b3I6IChnYW1lKSAtPlxuICAgIGdhbWUgPSBAZ2FtZVxuXG4gIGNyZWF0ZTogLT5cbiAgICBAZ2FtZU92ZXJUZXh0ID0gQGdhbWUuYWRkLnRleHQoMCwgMCwgXCJHQU1FIE9WRVJcIiwgeyBmb250OiAnYm9sZCA0MHB4IEFyaWFsJywgZmlsbDogJ3doaXRlJ30pXG4gICAgQGdhbWVPdmVyVGV4dC54ID0gTWF0aC5mbG9vcihAZ2FtZS53b3JsZC53aWR0aC8yIC0gQGdhbWVPdmVyVGV4dC53aWR0aC8yKVxuICAgIEBnYW1lT3ZlclRleHQueSA9IE1hdGguZmxvb3IoQGdhbWUud29ybGQuaGVpZ2h0LzIgLSBAZ2FtZU92ZXJUZXh0LmhlaWdodC8yKVxuXG4gICAgQHByZXNzVXBUZXh0ID0gQGdhbWUuYWRkLnRleHQoMCwgMCwgXCJQcmVzcyBVUCB0byB0cnkgYWdhaW5cIiwgeyBmb250OiAnbm9ybWFsIDIwcHggQXJpYWwnLCBmaWxsOiAnd2hpdGUnfSlcbiAgICBAcHJlc3NVcFRleHQueCA9IE1hdGguZmxvb3IoQGdhbWUud29ybGQud2lkdGgvMiAtIEBwcmVzc1VwVGV4dC53aWR0aC8yKVxuICAgIEBwcmVzc1VwVGV4dC55ID0gTWF0aC5mbG9vcigoQGdhbWUud29ybGQuaGVpZ2h0LzIgLSBAcHJlc3NVcFRleHQuaGVpZ2h0LzIpICsgNDApXG5cbiAgICBAY3Vyc29yID0gQGdhbWUuaW5wdXQua2V5Ym9hcmQuY3JlYXRlQ3Vyc29yS2V5cygpXG5cbiAgdXBkYXRlOiAtPlxuICAgIGlmIEBjdXJzb3IudXAuaXNEb3duXG4gICAgICBAZ2FtZS5zdGF0ZS5zdGFydCgnZ2FtZScsIHRydWUsIHRydWUpXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFByZUdhbWVcbiAgY29uc3RydWN0b3I6IChnYW1lKSAtPlxuICAgIGdhbWUgPSBAZ2FtZVxuXG4gIHByZWxvYWQ6IC0+XG4gICAgQGdhbWUubG9hZC5pbWFnZSgnYmcnLCAnL2Fzc2V0cy9pbWFnZXMvYmFja2dyb3VuZC5wbmcnKVxuXG4gIGNyZWF0ZTogLT5cbiAgICBAYmFja2dyb3VuZCA9IEBnYW1lLmFkZC5zcHJpdGUoMCwgMCwgJ2JnJylcblxuICAgIEBnYW1lT3ZlclRleHQgPSBAZ2FtZS5hZGQudGV4dCgwLCAwLCBcIlNwYWNlIFNob290ZXJcIiwgeyBmb250OiAnYm9sZCA0MHB4IEFyaWFsJywgZmlsbDogJ3doaXRlJ30pXG4gICAgQGdhbWVPdmVyVGV4dC54ID0gTWF0aC5mbG9vcihAZ2FtZS53b3JsZC53aWR0aC8yIC0gQGdhbWVPdmVyVGV4dC53aWR0aC8yKVxuICAgIEBnYW1lT3ZlclRleHQueSA9IE1hdGguZmxvb3IoQGdhbWUud29ybGQuaGVpZ2h0LzIgLSBAZ2FtZU92ZXJUZXh0LmhlaWdodC8yKVxuXG4gICAgQHByZXNzVXBUZXh0ID0gQGdhbWUuYWRkLnRleHQoMCwgMCwgXCJQcmVzcyBVUCB0byBwbGF5XCIsIHsgZm9udDogJ25vcm1hbCAyMHB4IEFyaWFsJywgZmlsbDogJ3doaXRlJ30pXG4gICAgQHByZXNzVXBUZXh0LnggPSBNYXRoLmZsb29yKEBnYW1lLndvcmxkLndpZHRoLzIgLSBAcHJlc3NVcFRleHQud2lkdGgvMilcbiAgICBAcHJlc3NVcFRleHQueSA9IE1hdGguZmxvb3IoKEBnYW1lLndvcmxkLmhlaWdodC8yIC0gQHByZXNzVXBUZXh0LmhlaWdodC8yKSArIDQwKVxuXG4gICAgQGN1cnNvciA9IEBnYW1lLmlucHV0LmtleWJvYXJkLmNyZWF0ZUN1cnNvcktleXMoKVxuXG4gIHVwZGF0ZTogLT5cbiAgICBpZiBAY3Vyc29yLnVwLmlzRG93blxuICAgICAgQGdhbWUuc3RhdGUuc3RhcnQoJ2dhbWUnLCB0cnVlLCB0cnVlKVxuIl19
